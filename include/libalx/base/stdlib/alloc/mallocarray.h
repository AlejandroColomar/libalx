/******************************************************************************
 *	Copyright (C) 2019	Alejandro Colomar Andr√©s		      *
 *	SPDX-License-Identifier:	LGPL-2.0-only			      *
 ******************************************************************************/


/******************************************************************************
 ******* include guard ********************************************************
 ******************************************************************************/
#pragma once	/* libalx/base/stdlib/alloc/mallocarray.h */


/******************************************************************************
 ******* about ****************************************************************
 ******************************************************************************/
/*
 * [[gnu::malloc]] [[gnu::warn_unused_result]]
 * void	*mallocarray(ptrdiff_t nmemb, size_t size);
 *
 * Almost equivalent to `reallocarray(NULL, nmemb, size)`.
 *
 * Features:
 * - It fails safely if (nmemb < 0).  With `reallocarray()` the array would be
 *	be allocated (it uses `size_t` instead of `ptrdiff_t`), and it's usage
 *	would likely produce undefined behavior.
 *
 * example:
 *	#define ALX_NO_PREFIX
 *	#include <libalx/base/stdlib/alloc/mallocarray.h>
 *
 *		int *arr;
 *
 *		arr	= mallocarray(7, sizeof(*arr));		// int arr[7];
 *		if (!arr)
 *			goto err;
 *
 *		// `arr` has been succesfully allocated here
 *		free(arr);
 *	err:
 *		// No memory leaks
 */


/******************************************************************************
 ******* headers **************************************************************
 ******************************************************************************/
#include <errno.h>
#include <stddef.h>
#include <stdlib.h>


/******************************************************************************
 ******* macros ***************************************************************
 ******************************************************************************/


/******************************************************************************
 ******* enum *****************************************************************
 ******************************************************************************/


/******************************************************************************
 ******* struct / union *******************************************************
 ******************************************************************************/


/******************************************************************************
 ******* prototypes ***********************************************************
 ******************************************************************************/
/*
 * mallocarray()
 *
 * nmemb:	Number of elements in the array.
 * size:	Size of each element in the array.
 *
 * return:
 *	!= NULL:	OK.
 *	NULL:		Failed.
 */
__attribute__((malloc, warn_unused_result))
inline
void	*alx_mallocarray	(ptrdiff_t nmemb, size_t size);


/******************************************************************************
 ******* always_inline ********************************************************
 ******************************************************************************/
/* Rename without alx_ prefix */
#if defined(ALX_NO_PREFIX)
__attribute__((always_inline, malloc, warn_unused_result))
inline
void	*mallocarray		(ptrdiff_t nmemb, size_t size)
{
	return	alx_mallocarray(nmemb, size);
}
#endif


/******************************************************************************
 ******* inline ***************************************************************
 ******************************************************************************/
inline
void	*alx_mallocarray	(ptrdiff_t nmemb, size_t size)
{

	if (nmemb < 0)
		goto ovf;

	return	reallocarray(NULL, nmemb, size);
ovf:
	errno	= ENOMEM;
	return	NULL;
}


/******************************************************************************
 ******* end of file **********************************************************
 ******************************************************************************/
