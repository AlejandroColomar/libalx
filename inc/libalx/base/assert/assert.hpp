/******************************************************************************
 *	Copyright (C) 2019	Alejandro Colomar Andr√©s		      *
 *	SPDX-License-Identifier:	LGPL-2.0-only			      *
 ******************************************************************************/


/******************************************************************************
 ******* include guard ********************************************************
 ******************************************************************************/
#ifndef ALX_ASSERT_ASSERT_HPP
#define ALX_ASSERT_ASSERT_HPP


/******************************************************************************
 ******* headers **************************************************************
 ******************************************************************************/
#include <cassert>

#include <type_traits>


/******************************************************************************
 ******* namespace ************************************************************
 ******************************************************************************/
namespace alx {


/******************************************************************************
 ******* macros ***************************************************************
 ******************************************************************************/
#define alx_static_assert_array(a)	do				\
{									\
									\
	static_assert(std::is_array<typeof(a)>::value, "Not a `[]`!");	\
} while (0)

#define alx_static_assert_char_array(a)	do				\
{									\
									\
	alx_static_assert_array(a);					\
	static_assert(std::is_same <char, typeof((a)[0])>::value,	\
						"Not a `char[]` !");	\
} while (0)


/******************************************************************************
 ******* enum *****************************************************************
 ******************************************************************************/


/******************************************************************************
 ******* struct / union *******************************************************
 ******************************************************************************/


/******************************************************************************
 ******* variables ************************************************************
 ******************************************************************************/


/******************************************************************************
 ******* extern functions *****************************************************
 ******************************************************************************/


/******************************************************************************
 ******* template (declarations) **********************************************
 ******************************************************************************/


/******************************************************************************
 ******* static inline functions (prototypes) *********************************
 ******************************************************************************/


/******************************************************************************
 ******* static inline functions (definitions) ********************************
 ******************************************************************************/


/******************************************************************************
 ******* template (definitions) ***********************************************
 ******************************************************************************/


/******************************************************************************
 ******* namespace ************************************************************
 ******************************************************************************/
}


/******************************************************************************
 ******* include guard ********************************************************
 ******************************************************************************/
#endif		/* libalx/base/assert/assert.hpp */


/******************************************************************************
 ******* end of file **********************************************************
 ******************************************************************************/
