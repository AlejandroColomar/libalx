/******************************************************************************
 *	Copyright (C) 2019	Alejandro Colomar Andr√©s		      *
 *	SPDX-License-Identifier:	LGPL-2.0-only			      *
 ******************************************************************************/


/******************************************************************************
 ******* include guard ********************************************************
 ******************************************************************************/
#pragma once	/* libalx/base/stdlib/alloc/mallocs.h */


/******************************************************************************
 ******* headers **************************************************************
 ******************************************************************************/
#include <errno.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>


/******************************************************************************
 ******* macros ***************************************************************
 ******************************************************************************/
/*
 * int	alx_mallocs(type **restrict p, ptrdiff_t nmemb)
 * __attribute__((nonnull));
 */
#define alx_mallocs(ptr, nmemb)	(					\
{									\
	__auto_type	ptr_	= (ptr);				\
									\
	*ptr_	= alx_mallocs__(nmemb, sizeof(**ptr_));			\
									\
	!(*ptr_);							\
}									\
)


/******************************************************************************
 ******* enums ****************************************************************
 ******************************************************************************/


/******************************************************************************
 ******* structs / unions *****************************************************
 ******************************************************************************/


/******************************************************************************
 ******* function prototypes **************************************************
 ******************************************************************************/
inline
void	*alx_mallocs__(ptrdiff_t nmemb, size_t size)
__attribute__((malloc));


/******************************************************************************
 ******* inline functions *****************************************************
 ******************************************************************************/
inline
void	*alx_mallocs__(ptrdiff_t nmemb, size_t size)
{

	if (nmemb < 0)
		goto ovf;
	if (nmemb > (PTRDIFF_MAX / (ptrdiff_t)size))
		goto ovf;

	return	malloc(size * nmemb);
ovf:
	errno	= EOVERFLOW;
	return	NULL;
}


/******************************************************************************
 ******* end of file **********************************************************
 ******************************************************************************/
