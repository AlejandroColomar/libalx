/******************************************************************************
 *	Copyright (C) 2019	Alejandro Colomar Andr√©s		      *
 *	SPDX-License-Identifier:	LGPL-2.0-only			      *
 ******************************************************************************/


/******************************************************************************
 ******* include guard ********************************************************
 ******************************************************************************/
#ifndef ALX_STDLIB_ALLOC_MALLOCS_H
#define ALX_STDLIB_ALLOC_MALLOCS_H


/******************************************************************************
 ******* headers **************************************************************
 ******************************************************************************/
#include <errno.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>


/******************************************************************************
 ******* macros ***************************************************************
 ******************************************************************************/
#define alx_mallocs__(ptr, nmemb)	(				\
{									\
	__label__	ret_;						\
	__auto_type	ptr_	= (ptr);				\
	int		err_;						\
									\
	err_	= 0;							\
	if (ptr_ == NULL) {						\
		errno	= EINVAL;					\
		err_	= EINVAL;					\
		goto ret_;						\
	}								\
									\
	*ptr_	= alx_mallocs((nmemb), sizeof(**ptr_));			\
	if (!(*ptr_))							\
		err_	= errno;					\
ret_:									\
	err_;								\
}									\
)


/******************************************************************************
 ******* enums ****************************************************************
 ******************************************************************************/


/******************************************************************************
 ******* structs / unions *****************************************************
 ******************************************************************************/


/******************************************************************************
 ******* variables ************************************************************
 ******************************************************************************/


/******************************************************************************
 ******* extern functions *****************************************************
 ******************************************************************************/


/******************************************************************************
 ******* static inline functions (prototypes) *********************************
 ******************************************************************************/
static inline	void	*alx_mallocs(ptrdiff_t nmemb, size_t size);


/******************************************************************************
 ******* static inline functions (definitions) ********************************
 ******************************************************************************/
static inline	void	*alx_mallocs(ptrdiff_t nmemb, size_t size)
{

	if (nmemb < 0)
		goto neg;
	if (nmemb > (PTRDIFF_MAX / (ptrdiff_t)size))
		goto ovf;

	return	malloc(size * nmemb);
neg:
ovf:
	errno	= EOVERFLOW;
	return	NULL;
}


/******************************************************************************
 ******* include guard ********************************************************
 ******************************************************************************/
#endif		/* libalx/base/stdlib/alloc/mallocs.h */


/******************************************************************************
 ******* end of file **********************************************************
 ******************************************************************************/
